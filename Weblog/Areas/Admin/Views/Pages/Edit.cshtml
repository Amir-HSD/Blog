@model DataLayer.Page

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>

@using (Html.BeginForm("Edit","pages",FormMethod.Post,new {@enctype= "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    
<div class="form-horizontal">
    <h4>Page</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.PageId)
    @Html.HiddenFor(model => model.PageVisitorCount)
    @Html.HiddenFor(model => model.PageCreateDate)
    @Html.HiddenFor(model => model.PageImage)

    <div class="form-group">
        @Html.LabelFor(model => model.PageGroupId, "PageGroupId", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("PageGroupId", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.PageGroupId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.PageTitle, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.PageTitle, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.PageTitle, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.PageDescription, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.PageDescription, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.PageDescription, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.PageContent, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.PageContent, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.PageContent, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.PageImage, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <input type="file" class="form-control" name="imgUp" aria-describedby="inputGroupFileAddon04" aria-label="Upload" />
            <img src="~/Content/images/@Model.PageImage" class="img-thumbnail" style="max-width: 100px" />
            @Html.ValidationMessageFor(model => model.PageImage, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.TagsPages, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <select class="form-control" multiple="multiple" id="input-tags" name="tags">
                @foreach (var item in Model.TagsPages)
                {
                    <option selected>@item.Tag.TagName</option>
                }
            </select>
            @Html.ValidationMessageFor(model => model.TagsPages, "", new { @class = "text-danger" })

        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-success" />
            @Html.ActionLink("Back to List", "Index", "pages", new { @class = "btn btn-secondary" })
        </div>
    </div>
</div>
}

<script>
    $('#input-tags').selectize({
        plugins: ['remove_button'],
        delimiter: ',',
        persist: false,
        createFilter: function (input) {
            return input.length > 2;
        },
        create: function (input) {
            return {
                value: input,
                text: input
            };
        }
    });

</script>
